# Environment variables expected by RAUC
# See https://rauc.readthedocs.io/en/latest/integration.html#set-up-u-boot-boot-script-for-rauc
test -n "${BOOT_ORDER}" || setenv BOOT_ORDER "system recovery"
test -n "${BOOT_system_LEFT}" || setenv BOOT_system_LEFT 3
test -n "${BOOT_recovery_LEFT}" || setenv BOOT_recovery_LEFT 3

# Partition scheme as defined in meta-multiboot-update/wic/multiboot.wks.in
setenv mmc_device "@@MMC_BLOCK_DEVICE_NUM@@"
setenv bootloader_partition "1"
setenv bootargs_default "@@DEFAULT_BOOTARGS@@"

setenv kernel_partition
setenv rootfs_partition
setenv rootfs_type
setenv rauc_slot

echo "=== Determining active slot to be booted ==="
for slot in "${BOOT_ORDER}"; do
  if test "x${rauc_slot}" != "x"; then
    # rauc_slot already found, performing no-op
    echo "[DEBUG] Skipping ${slot} slot..."
  elif test "x${slot}" = "xrecovery"; then
    if test ${BOOT_recovery_LEFT} -gt 0; then
      setexpr BOOT_recovery_LEFT ${BOOT_recovery_LEFT} - 1
      setenv kernel_partition "2"
      setenv rootfs_partition "3"
      setenv rootfs_type "squashfs"
      setenv rauc_slot "recovery"
      echo "[INFO] Selected recovery slot (kernel in p2, rootfs in p3)!"
    fi
  elif test "x${slot}" = "xsystem"; then
    if test ${BOOT_system_LEFT} -gt 0; then
      setexpr BOOT_system_LEFT ${BOOT_system_LEFT} - 1
      # Account for the msdos extended partition (p4)
      setenv kernel_partition "5"
      setenv rootfs_partition "6"
      setenv rootfs_type "ext4"
      setenv rauc_slot "system"
      echo "[INFO] Selected system slot (kernel in p5, rootfs in p6)!"
    fi
  fi
done

if test "x${rauc_slot}" = "x"; then
  echo "[ERROR] No valid slot found! Resetting tries to 3 and exiting script..."
  setenv BOOT_system_LEFT 3
  setenv BOOT_recovery_LEFT 3
  saveenv
  exit
fi

echo "=== Loading device tree ('@@DTB_FILE_NAME@@') from p${kernel_partition} to ${fdt_addr_r} ==="
fatload mmc ${mmc_device}:${kernel_partition} ${fdt_addr_r} @@DTB_FILE_NAME@@

echo "=== Loading kernel image ('@@KERNEL_IMAGETYPE@@') from p${kernel_partition} to ${kernel_addr_r} ==="
fatload mmc ${mmc_device}:${kernel_partition} ${kernel_addr_r} @@KERNEL_IMAGETYPE@@

echo "=== Setting bootargs (rootfs in p${rootfs_partition} and slot ${rauc_slot}) ==="
setenv bootargs "${bootargs_default} root=/dev/mmcblk${mmc_device}p${rootfs_partition} rootfstype=${rootfs_type} rauc.slot=${rauc_slot}"
echo "[DEBUG] bootargs: ${bootargs}"

echo "=== Persisting environment in p${bootloader_partition} ==="
if test ! -e mmc ${mmc_device}:${bootloader_partition} uboot.env; then 
  saveenv
fi

echo "=== Booting the system now! ==="
@@KERNEL_BOOTCMD@@ ${kernel_addr_r} - ${fdt_addr_r}
