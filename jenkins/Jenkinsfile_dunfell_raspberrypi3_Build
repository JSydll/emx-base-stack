pipeline {
    agent any
    
    parameters {
        choice(name: 'BuildArtifact', choices: ['full-image', 'system-update-bundle', 'recovery-update-bundle'], description: 'Select the build artefact to be created.')
        choice(name: 'Cache', choices: ['Wipe', 'Keep'], description: 'Select how the build cache should be handled. >Wipe< erases all cached data for all packages linked to the selected build target and >Keep< uses the cache as much as possible.')
    }
    environment {
        AGENT_DOCKER_VOLUME="jenkins_agent_workspace"
        
        RELEASE_TAG="dunfell"
        ENV_FILE = """\
            USER=jenkins
            MOUNT_VOLUME=${AGENT_DOCKER_VOLUME}:${WORKSPACE}/..
            PROJECT_ROOT=${WORKSPACE}
            POKY_DIR=sources/poky
            BUILD_DIR=build
            PROJECT_TEMPLATE_DIR=config
            MACHINE=raspberrypi3
            BSP_LAYERS=${WORKSPACE}/sources/boards/raspberrypi/meta-raspberrypi,${WORKSPACE}/sources/boards/raspberrypi/meta-raspberrypi-multiboot-update
            ROOT_PWD=super-secret-root-pwd
            KEYBOARD_PROFILE=de-latin1.map
            NETWORK_STATIC_IP=127.0.0.1
            WIFI_SSID=Dummy-Network
            WIFI_PWD=also-secret-network-pwd
        """.stripIndent().stripMargin()
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'dunfell']],
                    userRemoteConfigs: [[url: 'https://github.com/JSydll/emx-base-stack']],
                    extensions: [[$class: 'SubmoduleOption', recursiveSubmodules: true]]
                ])
            }
        }
        stage("Build [raspberrypi3]") {
            steps {
                sh """
                    # Provide build environment
                    echo "${ENV_FILE}" > .env
                    export RELEASE_TAG=${RELEASE_TAG}
                    
                    # Optionally clean the build cache
                    if [ "${params.Cache}" = "Wipe" ]; then
                        # Keep the sstatecache
                        rm -rf build/tmp
                    fi
                    
                    # Start build
                    ./run-env.sh bitbake ${params.BuildArtifact}
                """
            }
        }
    }
    post {
        success {
            archiveArtifacts artifacts: 
                "build/tmp/deploy/images/**/${params.BuildArtifact}-*.wic.bz, build/tmp/deploy/images/**/${params.BuildArtifact}-*.raucb",
                    allowEmptyArchive: true, onlyIfSuccessful: true, followSymlinks: true
        }
    }
}
